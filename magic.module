<?php

/**
 * @file Keep Frontend DRY; sprinkle it with MAGIC!
 */

// We set a specific group for jquery, so our CDN work actually works.
define('JS_JQUERY', -10000);
define('JS_DRUPAL', -9000);

// Require all external scripts that are needed for this
require_once dirname(__FILE__) . '/includes/css.inc';
require_once dirname(__FILE__) . '/includes/scripts.inc';
require_once dirname(__FILE__) . '/includes/scripts-experimental.inc';



/**
  * Implements hook_form_alter
  */
function magic_form_system_theme_settings_alter(&$form, &$form_state) {
  $theme = $form_state['build_info']['args'][0];

  // Magic Performance Vertical Tabs set
  $form['magic_performance'] = array(
    '#type' => 'vertical_tabs',
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'magic') . '/css/magic.admin.css'),
    ),
    '#weight' => 100,
  );

  // CSS Magic Grouping
  $form['magic_performance']['css'] = array(
    '#type' => 'fieldset',
    '#title' => t('CSS Enhancements'),
  );

  // Embedded Media Query Option
  $form['magic_performance']['css']['magic_embedded_mqs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Embed Media Queries'),
    '#description' => t('Embed media queries instead of attaching them to the <pre>&lt;link&gt;</pre> tags, reducing the number of separate CSS aggregates.'),
    '#default_value' => theme_get_setting('magic_embedded_mqs', $theme),
  );

  // CSS Exclude Options
  $form['magic_performance']['css']['magic_css_excludes'] = array(
    '#type' => 'textarea',
    '#title' => t('Exclude CSS files'),
    '#description' => t("Enter one file per line. The <pre>*</pre> character is a wildcard to match all similar items, for instance <pre>system/*.css</pre> will remove all CSS provided by the System module. The <pre>~</pre> character is a reserved character to keep all similar items if they would otherwise be removed, for instance <pre>~system/system.menus.css</pre> to keep System module's menu CSS even if we remove the rest of System module's CSS. You may use <pre>:all</pre> to target all CSS files, <pre>:core</pre> to target all Core provided CSS files, <pre>:contrib</pre> to target all Contrib provided CSS files, <pre>:base-theme</pre> to target all base theme provided CSS files, and <pre>:current-theme</pre> to target all CSS files provided by the current theme."),
    '#default_value' => implode("\n", (array) theme_get_setting('magic_css_excludes', $theme)),
  );

  // JavaScript Magic Grouping
  $form['magic_performance']['js'] = array(
    '#type' => 'fieldset',
    '#title' => t('JavaScript Enhancements'),
  );

  // Footer JavaScript Option
  $form['magic_performance']['js']['magic_footer_js'] = array(
    '#type' => 'checkbox',
    '#title' => t('Move JavaScript to the Footer'),
    '#description' => t("Will move all JavaScript to the bottom of your page. This can be overridden on an individual basis by setting the <pre>'force header' => true</pre> option in <pre>drupal_add_js</pre> or by using <pre>hook_js_alter</pre> to add the option to other JavaScript files."),
    '#default_value' => theme_get_setting('magic_footer_js', $theme),
  );

  // Keep Libraries in Head JavaScript Option
  $form['magic_performance']['js']['magic_library_head'] = array(
    '#type' => 'checkbox',
    '#title' => t('Keep Libraries in the Head'),
    '#description' => t("If you have JavaScript inline in the body of your document, such as if you are displaying ads, you may need to keep Drupal JS Libraries in the head instead of moving them to the footer. This will keep Drupal libraries in the head while still moving all other JavaScript to the footer."),
    '#default_value' => theme_get_setting('magic_library_head', $theme),
    '#states' => array(
      'visible' => array(
        ':input[name=magic_footer_js]' => array('checked' => TRUE),
      ),
    ),
  );

  // Experimental JavaScript Option
  $form['magic_performance']['js']['magic_experimental_js'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Experimental JavaScript Handling'),
    '#description' => t("This will enable additional options for JavaScript, including browser options, <pre>async</pre> and <pre>defer</pre> attributes, and optional additional attributes."),
    '#default_value' => theme_get_setting('magic_experimental_js', $theme),
  );

  // JavaScript Exclude Options
  $form['magic_performance']['js']['magic_js_excludes'] = array(
    '#type' => 'textarea',
    '#title' => t('Exclude JavaScript files'),
    '#description' => t("Enter one file per line. The <pre>*</pre> character is a wildcard to match all similar items, for instance <pre>overlay/*.js</pre> will remove all JS provided by the Overlay module. The <pre>~</pre> character is a reserved character to keep all similar items if they would otherwise be removed, for instance <pre>~overlay/overlay-child.js</pre> to keep Overlay module's overlay-child JS even if we remove the rest of Overlay module's JS. You may use <pre>:all</pre> to target all JS files, <pre>:core</pre> to target all Core provided JS files, <pre>:contrib</pre> to target all Contrib provided JS files, <pre>:base-theme</pre> to target all base theme provided JS files, and <pre>:current-theme</pre> to target all JS files provided by the current theme."),
    '#default_value' => implode("\n", (array) theme_get_setting('magic_js_excludes', $theme)),
  );

  // Development Magic Grouping
  $form['magic_performance']['dev'] = array(
    '#type' => 'fieldset',
    '#title' => t('Development Enhancements'),
  );

  // Footer JavaScript Option
  $form['magic_performance']['dev']['magic_rebuild_registry'] = array(
    '#type' => 'checkbox',
    '#title' => t('Rebuild Theme Registry on Reload'),
    '#description' => t('<a href="!link" target="_blank">Rebuild the theme registry</a> during project development.', array('!link' => 'http://drupal.org/node/173880#theme-registry')),
    '#default_value' => theme_get_setting('magic_rebuild_registry', $theme),
  );

  // Viewport Indicator Option
  $form['magic_performance']['dev']['magic_viewport_indicator'] = array(
    '#type' => 'checkbox',
    '#title' => t('Viewport Width Indicator'),
    '#description' => t('Displays an indicator of the viewport. Tap/click to toggle between <em>em</em> and <em>px</em>. The CSS and JavaScript for this will bypass your CSS and JavaScript exclude options.'),
    '#default_value' => theme_get_setting('magic_viewport_indicator', $theme),
  );

  // Modernizr Debug Option
  $options = array('attributes' => array('target' => '_blank'));
  $form['magic_performance']['dev']['magic_modernizr_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Modernizr Indicator'),
    '#description' => t('Displays an indicator of !modernizr detected features. Tap/click to toggle display of all of the available features. Install the !module for full Modernizr support. The CSS and JavaScript for this will bypass your CSS and JavaScript exclude options.', array('!modernizr' => l('Modernizr', 'http://modernizr.com/', $options), '!module' => l('Modernizr Drupal module', 'http://drupal.org/project/modernizr', $options))),
    '#default_value' => theme_get_setting('magic_modernizr_debug', $theme),
  );
}

/**
  * Implements hook_preprocess_html
  */
function magic_preprocess_html(&$vars)  {
  global $theme_key;

  //////////////////////////////
  // Theme Registry Rebuild
  //////////////////////////////
  if (theme_get_setting('magic_rebuild_registry', $theme_key) && !defined('MAINTENANCE_MODE')) {
    // Rebuild .info data.
    system_rebuild_theme_data();
    // Rebuild theme registry.
    drupal_theme_rebuild();
  }

  //////////////////////////////
  // RWD Debug Integration
  //////////////////////////////
  if (theme_get_setting('magic_viewport_indicator', $theme_key) || theme_get_setting('magic_modernizr_debug', $theme_key)) {
    drupal_add_css(drupal_get_path('module', 'magic') . '/css/magic.debug.css');
    drupal_add_js(drupal_get_path('module', 'magic') . '/js/magic.debug.js');
  }
}

/**
  * Implements hook_process_html
  */
function magic_process_html(&$vars) {
  global $theme_key;

  //////////////////////////////
  // RWD Debug Integration
  //////////////////////////////
  if (theme_get_setting('magic_viewport_indicator', $theme_key) || theme_get_setting('magic_modernizr_debug', $theme_key)) {

    $debug_output = '<div id="magic-development">';

    if (theme_get_setting('magic_viewport_indicator', $theme_key)) {
      $debug_output .= '<div id="magic-viewport-indicator"></div>';
    }
    if (theme_get_setting('magic_modernizr_debug', $theme_key)) {
      $debug_output .= '<div id="magic-modernizr-debug" class="open"></div>';
    }

    $debug_output .= '</div>';

    if (!empty($vars['page_bottom'])) {
      $vars['page_bottom'] .= $debug_output;
    }
    else {
      $vars['page_bottom'] = $debug_output;
    }
  }
}

/**
  * Implements hook_theme_registry_alter().
  */
function magic_theme_registry_alter(&$registry) {
  if (($index = array_search('template_process_html', $registry['html']['process functions'], TRUE)) !== FALSE) {
    array_splice($registry['html']['process functions'], $index, 1, 'magic_template_process_html_override');
  }
}

/**
  * Overrides template_process_html() in order to provide support for awesome new stuffzors!
  *
  * Huge, amazing ups to the wizard Sebastian Siemssen (fubhy) for showing me how to do this.
  */
function magic_template_process_html_override(&$variables) {
  // dpm($variables);

  global $theme_key;

  $options = array(
    'magic_js_excludes',
    'magic_experimental_js',
    'magic_library_head',
    'magic_footer_js',
    'magic_css_excludes',
    'magic_embedded_mqs',
  );
  $theme_options = array();

  foreach ($options as $option) {
    $theme_options[$option] = variable_get($theme_key . '-' . $option);
  }

  // Render page_top and page_bottom into top level variables.
  $variables['page_top'] = drupal_render($variables['page']['page_top']);
  $variables['page_bottom'] = drupal_render($variables['page']['page_bottom']);
  // Place the rendered HTML for the page body into a top level variable.
  $variables['page'] = $variables['page']['#children'];


  $variables['head'] = drupal_get_html_head();
  $variables['css'] = drupal_add_css();
  $variables['styles']  = drupal_get_css();

  if ($theme_options['magic_experimental_js']) {
    dpm('Experimental JS');
    $variables['page_bottom'] .= magic_experimental_js('footer');
    $variables['scripts'] = magic_experimental_js('header');
  }
  elseif ($theme_options['magic_footer_js']) {
    $variables['page_bottom'] .= magic_get_js('footer');
    $variables['scripts'] = magic_get_js('header');
  }
  else {
    $variables['page_bottom'] .= drupal_get_js('footer');
    $variables['scripts'] = drupal_get_js();
  }
}

/**
 * Implements hook_css_alter.
 */
function magic_css_alter(&$css) {

}
