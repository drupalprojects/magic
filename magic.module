<?php

/**
 * @file Keep Frontend DRY; sprinkle it with MAGIC!
 */

// We set a specific group for jquery, so our CDN work actually works.
define('JS_JQUERY', -10000);
define('JS_DRUPAL', -9000);

// Require all external scripts that are needed for this
require_once dirname(__FILE__) . '/includes/magic.inc';
require_once dirname(__FILE__) . '/includes/css.inc';
require_once dirname(__FILE__) . '/includes/scripts.inc';
require_once dirname(__FILE__) . '/includes/scripts-experimental.inc';



/**
  * Implements hook_form_alter
  */
function magic_form_system_theme_settings_alter(&$form, &$form_state) {
  $theme = isset($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0] : '';

  // Magic Performance Vertical Tabs set
  $form['magic_performance'] = array(
    '#type' => 'vertical_tabs',
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'magic') . '/css/magic.admin.css'),
    ),
    '#weight' => 100,
  );

  // CSS Magic Grouping
  $form['magic_performance']['css'] = array(
    '#type' => 'fieldset',
    '#title' => t('CSS Enhancements'),
  );

  // Embedded Media Query Option
  $form['magic_performance']['css']['magic_embedded_mqs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Embed Media Queries'),
    '#description' => t('Embed media queries instead of attaching them to the <pre>&lt;link&gt;</pre> tags, reducing the number of separate CSS aggregates.'),
    '#default_value' => theme_get_setting('magic_embedded_mqs', $theme),
  );

  // CSS Exclude Options
  $form['magic_performance']['css']['magic_css_excludes'] = array(
    '#type' => 'textarea',
    '#title' => t('Exclude CSS files'),
    '#description' => t("Enter one file per line. The <pre>*</pre> character is a wildcard to match all similar items, for instance <pre>system/*.css</pre> will remove all CSS provided by the System module. The <pre>~</pre> character is a reserved character to keep all similar items if they would otherwise be removed, for instance <pre>~system/system.menus.css</pre> to keep System module's menu CSS even if we remove the rest of System module's CSS. You may use <pre>:all</pre> to target all CSS files, <pre>:core</pre> to target all Core provided CSS files, <pre>:contrib</pre> to target all Contrib provided CSS files, <pre>:base-theme</pre> to target all base theme provided CSS files, and <pre>:current-theme</pre> to target all CSS files provided by the current theme."),
    '#default_value' => theme_get_setting('magic_css_excludes', $theme),
  );

  // JavaScript Magic Grouping
  $form['magic_performance']['js'] = array(
    '#type' => 'fieldset',
    '#title' => t('JavaScript Enhancements'),
  );

  // Footer JavaScript Option
  $form['magic_performance']['js']['magic_footer_js'] = array(
    '#type' => 'checkbox',
    '#title' => t('Move JavaScript to the Footer'),
    '#description' => t("Will move all JavaScript to the bottom of your page. This can be overridden on an individual basis by setting the <pre>'force header' => true</pre> option in <pre>drupal_add_js</pre> or by using <pre>hook_js_alter</pre> to add the option to other JavaScript files."),
    '#default_value' => theme_get_setting('magic_footer_js', $theme),
  );

  // Keep Libraries in Head JavaScript Option
  $form['magic_performance']['js']['magic_library_head'] = array(
    '#type' => 'checkbox',
    '#title' => t('Keep Libraries in the Head'),
    '#description' => t("If you have JavaScript inline in the body of your document, such as if you are displaying ads, you may need to keep Drupal JS Libraries in the head instead of moving them to the footer. This will keep Drupal libraries in the head while still moving all other JavaScript to the footer."),
    '#default_value' => theme_get_setting('magic_library_head', $theme),
    '#states' => array(
      'visible' => array(
        ':input[name=magic_footer_js]' => array('checked' => TRUE),
      ),
    ),
  );

  // Experimental JavaScript Option
  $form['magic_performance']['js']['magic_experimental_js'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Experimental JavaScript Handling'),
    '#description' => t("This will enable additional options for JavaScript, including browser options, <pre>async</pre> and <pre>defer</pre> attributes, and optional additional attributes."),
    '#default_value' => theme_get_setting('magic_experimental_js', $theme),
  );

  // JavaScript Exclude Options
  $form['magic_performance']['js']['magic_js_excludes'] = array(
    '#type' => 'textarea',
    '#title' => t('Exclude JavaScript files'),
    '#description' => t("Enter one file per line. The <pre>*</pre> character is a wildcard to match all similar items, for instance <pre>overlay/*.js</pre> will remove all JS provided by the Overlay module. The <pre>~</pre> character is a reserved character to keep all similar items if they would otherwise be removed, for instance <pre>~overlay/overlay-child.js</pre> to keep Overlay module's overlay-child JS even if we remove the rest of Overlay module's JS. You may use <pre>:all</pre> to target all JS files, <pre>:core</pre> to target all Core provided JS files, <pre>:contrib</pre> to target all Contrib provided JS files, <pre>:base-theme</pre> to target all base theme provided JS files, and <pre>:current-theme</pre> to target all JS files provided by the current theme."),
    '#default_value' => theme_get_setting('magic_js_excludes', $theme),
  );

  // Development Magic Grouping
  $form['magic_performance']['dev'] = array(
    '#type' => 'fieldset',
    '#title' => t('Development Enhancements'),
  );

  // Footer JavaScript Option
  $form['magic_performance']['dev']['magic_rebuild_registry'] = array(
    '#type' => 'checkbox',
    '#title' => t('Rebuild Theme Registry on Reload'),
    '#description' => t('<a href="!link" target="_blank">Rebuild the theme registry</a> during project development.', array('!link' => 'http://drupal.org/node/173880#theme-registry')),
    '#default_value' => theme_get_setting('magic_rebuild_registry', $theme),
  );

  // Viewport Indicator Option
  $form['magic_performance']['dev']['magic_viewport_indicator'] = array(
    '#type' => 'checkbox',
    '#title' => t('Viewport Width Indicator'),
    '#description' => t('Displays an indicator of the viewport. Tap/click to toggle between <em>em</em> and <em>px</em>. The CSS and JavaScript for this will bypass your CSS and JavaScript exclude options.'),
    '#default_value' => theme_get_setting('magic_viewport_indicator', $theme),
  );

  if (module_exists('modernizr')) {
    // Modernizr Debug Option
    $options = array('attributes' => array('target' => '_blank'));
    $form['magic_performance']['dev']['magic_modernizr_debug'] = array(
      '#type' => 'checkbox',
      '#title' => t('Modernizr Indicator'),
      '#description' => t('Displays an indicator of !modernizr detected features. Tap/click to toggle display of all of the available features. Install the !module for full Modernizr support. The CSS and JavaScript for this will bypass your CSS and JavaScript exclude options.', array('!modernizr' => l('Modernizr', 'http://modernizr.com/', $options), '!module' => l('Modernizr Drupal module', 'http://drupal.org/project/modernizr', $options))),
      '#default_value' => theme_get_setting('magic_modernizr_debug', $theme),
    );
  }
  else {
    // We don't have modernizr :-(
    $form['magic_performance']['dev']['magic_modernizr_debug'] = array(
      '#type' => 'hidden',
      '#value' => FALSE,
    );
  }



  // We need a custom submit handler to store the CSS and JS paths as arrays.
  array_unshift($form['#submit'], 'magic_extension_assets_theme_settings_form_submit');

}

/**
 * Submit handler for the theme settings form.
 *
 * This form will take the theme settings, and for the css and js excludes,
 * create the regex that will be required to remove the css and js files at
 * will. It will then selectively clear the caches for those specific cache
 * items.
 */
function magic_extension_assets_theme_settings_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $clear_caches = array('css' => FALSE, 'js' => FALSE);

  foreach (array('magic_css_excludes', 'magic_js_excludes') as $item) {


    // Check to see if this has changed since the last save. If so, we have to
    // rebuild the regex and clear our caches.
    $current_settings = variable_get($values['var'], FALSE);

    if (!$current_settings[$item] || $values[$item] !== $current_settings[$item]) {
      // Since we are updating the script, we must clear our caches after. We
      // set it this way, so that we don't clear them twice if both the CSS and
      // JS changed.
      $type = ($item == 'magic_css_excludes' ? 'css' : 'js');
      $clear_caches[$type] = TRUE;

      // Explode and trim the values for the exclusion rules.
      $excludes = array_filter(array_map('trim', explode("\n", $values[$item])));

       if (!empty($excludes)) {
        // Now we get the regex and set that.
        $excludes = magic_generate_exclude_full($excludes);

        $excludes['exclude'] = magic_generate_path_regex($excludes['exclude']);
        $excludes['include'] = magic_generate_path_regex($excludes['include']);

        if ($item = 'magic_css_excludes') {
          // Make sure that RTL styles are excluded as well when a file name has been
          // specified with it's full .css file extension.
          $excludes['exclude'] = preg_replace('/\\\.css$/', '(\.css|-rtl\.css)', $excludes['exclude']);
          $excludes['include'] = preg_replace('/\\\.css$/', '(\.css|-rtl\.css)', $excludes['include']);
        }

        // Last check, if we didnt actually have anything in excludes, we don't
        // save a thing.
        if ($excludes['exclude'] == FALSE) {
          $excludes = FALSE;
        }
      }
      else {
        // We have nothing we are excluding, ignore the setting.
        $excludes = FALSE;
      }

      form_set_value(array('#parents' => array($item . '_regex')), $excludes, $form_state);
    }
  }

  // Now we will actually clear the caches.
  if (!empty($clear_caches)) {
    _magic_clear_cache(substr($values['var'], '6', '-9'), $clear_caches);
  }
}

/**
  * Implements hook_preprocess_html
  */
function magic_preprocess_html(&$vars)  {
  global $theme_key;

  //////////////////////////////
  // Theme Registry Rebuild
  //////////////////////////////
  if (theme_get_setting('magic_rebuild_registry', $theme_key) && !defined('MAINTENANCE_MODE')) {
    // Rebuild .info data.
    system_rebuild_theme_data();
    // Rebuild theme registry.
    drupal_theme_rebuild();
  }

  //////////////////////////////
  // RWD Debug Integration
  //////////////////////////////
  if (theme_get_setting('magic_viewport_indicator', $theme_key) || theme_get_setting('magic_modernizr_debug', $theme_key)) {
    drupal_add_css(drupal_get_path('module', 'magic') . '/css/magic.debug.css');
    drupal_add_js(drupal_get_path('module', 'magic') . '/js/magic.debug.js');
  }
}

/**
  * Implements hook_process_html
  */
function magic_process_html(&$vars) {
  global $theme_key;

  //////////////////////////////
  // RWD Debug Integration
  //////////////////////////////
  if (theme_get_setting('magic_viewport_indicator', $theme_key) || theme_get_setting('magic_modernizr_debug', $theme_key)) {

    $debug_output = '<div id="magic-development">';

    if (theme_get_setting('magic_viewport_indicator', $theme_key)) {
      $debug_output .= '<div id="magic-viewport-indicator"></div>';
    }
    if (theme_get_setting('magic_modernizr_debug', $theme_key)) {
      $debug_output .= '<div id="magic-modernizr-debug" class="open"></div>';
    }

    $debug_output .= '</div>';

    if (!empty($vars['page_bottom'])) {
      $vars['page_bottom'] .= $debug_output;
    }
    else {
      $vars['page_bottom'] = $debug_output;
    }
  }
}

/**
  * Implements hook_theme_registry_alter().
  */
function magic_theme_registry_alter(&$registry) {
  if (($index = array_search('template_process_html', $registry['html']['process functions'], TRUE)) !== FALSE) {
    array_splice($registry['html']['process functions'], $index, 1, 'magic_template_process_html_override');
  }
}

/**
  * Overrides template_process_html() in order to provide support for awesome new stuffzors!
  *
  * Huge, amazing ups to the wizard Sebastian Siemssen (fubhy) for showing me how to do this.
  */
function magic_template_process_html_override(&$variables) {
  // Render page_top and page_bottom into top level variables.
  $variables['page_top'] = drupal_render($variables['page']['page_top']);
  $variables['page_bottom'] = drupal_render($variables['page']['page_bottom']);
  // Place the rendered HTML for the page body into a top level variable.
  $variables['page'] = $variables['page']['#children'];


  $variables['head'] = drupal_get_html_head();
  $variables['css'] = drupal_add_css();
  $variables['styles']  = drupal_get_css();

  if (theme_get_setting('magic_experimental_js')) {
    $variables['page_bottom'] .= magic_experimental_js('footer');
    $variables['scripts'] = magic_experimental_js('header');
  }
  elseif (theme_get_setting('magic_footer_js')) {
    $variables['page_bottom'] .= magic_get_js('footer');
    $variables['scripts'] = magic_get_js('header');
  }
  else {
    $variables['page_bottom'] .= drupal_get_js('footer');
    $variables['scripts'] = drupal_get_js();
  }
}

/**
 * Checks the magic cache.
 *
 * @param string $cid
 *   A string cache id. {theme_name}_{css/js}_{md4_hash}
 *
 * @return array
 *   Either the array of the cached data, or FALSE.
 */
function _magic_check_cache($cid) {
  $data = cache_get($cid, 'cache_magic');

  return $data ? unserialize($data->data) : FALSE;
}

/**
 * Sets the magic cache.
 *
 * @param string $cid
 *   A string cache id. {theme_name}_{css/js}_{md4_hash}
 * @param array $data
 *   The array of data to store within the cache.
 *
 * @return object
 *   A cache data object.
 */
function _magic_set_cache($cid, $data) {
  $data = serialize($data);

  return cache_set($cid, $data, 'cache_magic', CACHE_TEMPORARY);
}

/**
 * A helper function to clear the magic cache.
 *
 * @param mixed $theme (default: FALSE)
 *   The theme name, or FALSE to delete all caches.
 * @param array $types (default: array())
 *   The type of caches to remove. May have an array keyed with 'css' or 'js' or
 *   leave empty to clear both.
 */
function _magic_clear_cache($theme = FALSE, $types = array()) {

  if ($theme) {
    // We are only clearing the cache for a specific theme, not all caches.
    // We do this with a straight db_delete, because we are removing several
    // cache objects at once.
    $query = db_delete('cache_magic')
      ->condition('expire', CACHE_PERMANENT, '<>')
      ->condition('expire', REQUEST_TIME, '<');

    if (empty($types) || ($types['css'] == TRUE && $types['js'] == TRUE)) {
      // We are clearing all caches for a theme.
      $or = db_or()
        ->condition('cid', db_like($theme . '_css_') . '%', 'LIKE')
        ->condition('cid', db_like($theme . '_js_') . '%', 'LIKE');

      $query->condition($or);
    }
    else {
      // We are only clearing either the CSS or JS cache for a theme.
      $which = ($types['css'] ? '_css_' : '_js_');
      $query->condition('cid', db_like($theme . $which) . '%', 'LIKE');
    }
    $query->execute();
  }
  else {
    // No settings were passed, we will clear all caches.
    cache_clear_all(NULL, 'cache_magic');
  }
}

/**
 * Implements hook_flush_caches.
 */
function magic_flush_caches() {
  return array('cache_magic');
}

/**
 * Implements hook_drush_cache_clear.
 */
function magic_drush_cache_clear(&$types) {
  $types['magic'] = '_magic_clear_cache';
}

/**
 * Implements hook_css_alter.
 */
function magic_css_alter(&$css) {
  magic_css_js_alter($css, 'css');
}

/**
 * Implements hook_js_alter.
 */
function magic_js_alter(&$js) {
  magic_css_js_alter($js, 'js');
}

/**
 * Helper fucntion to remove unwanted css or js.
 *
 * @param array $data
 *   The css or js array.
 * @param string $type (default: 'css')
 *   Either 'css' or 'js' depending on the file array.
 */
function magic_css_js_alter(&$data, $type = 'css') {
  global $theme_key;

  // First check to see if we are even going to exclude anything.
  $excludes = theme_get_setting("magic_{$type}_excludes_regex");

  if (is_array($excludes)) {
    // We get the hash of the css array to check if it has been passed already.
    $cid = $theme_key . "_{$type}_" . hash('md4', serialize($data));

    $cache = _magic_check_cache($cid);

    if ($cache) {
      // We have this array cached, use it.
      $data = $cache;
    }
    else {
      magic_exclude_assets($data, $excludes['exclude'], $excludes['include']);

      _magic_set_cache($cid, $data);
    }
  }
}
